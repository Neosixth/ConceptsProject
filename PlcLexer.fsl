{
module PlcLexer

open Microsoft.FSharp.Text.Lexing
open PlcParser;

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

(* Start of outermost comment currently being scanned *)
let commentStart = ref Position.Empty;  
 
let commentDepth = ref 0;  (* Current comment nesting *)

(* Distinguish keywords from identifiers: *)

let keyword s =
    match s with
    | "else"  -> ELSE 
    | "false" -> CSTBOOL false
    | "if"    -> IF
    | "then"  -> THEN
    | "var"  -> VAR
    | "fun"  -> FUN
    | "true"  -> CSTBOOL true
    | "Int"  -> INT
    | "Bool"  -> BOOL
    | "Unit"  -> UNIT
    | "List"  -> LIST           (* added*)
    | "Tuple" -> TUPLE
    | "fn"    -> FN
    | "end"   -> END
    | "rec"   -> REC
    | "hd"    -> HD
    | "tl"    -> TL
    | "ise"   -> ISE
    | "print" -> PRINT
    | _       -> NAME s
}

rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | "(*"            { commentStart := lexbuf.StartPos;
                      commentDepth := 1; 
                      SkipComment lexbuf; Token lexbuf }
  | '->'            { ARROW }
  | '=>'            { DARROW }
  | '&&'            { AND }
  | '::'            { CONS }
  | '!='            { NEQ }
  | '<='            { LTE }
  | '['             { LBRACK }
  | ']'             { BRACK }
  | '='             { EQ }
  | '!'             { NOT }
  | '<'             { LT }
  | '+'             { PLUS }                     
  | '-'             { MINUS }                     
  | '*'             { TIMES }                     
  | '/'             { DIV }                     
  | '('             { LPAR }
  | ')'             { RPAR }
  | '{'             { LBRACE }
  | '}'             { RBRACE }
  | ';'             { SEMIC }
  | ','             { COMMA }
  | '#'             { HASH }
  | ':'             { COLON }
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }

and SkipComment = parse
    "*)"            { commentDepth := !commentDepth - 1;  
                      if !commentDepth = 0 then ()
                      else SkipComment lexbuf 
                    } 
   | "(*"           { commentDepth := !commentDepth + 1; 
                      SkipComment lexbuf }
   | eof            { failwith "Lexer error: unterminated comment" }
   | _              { SkipComment lexbuf }

